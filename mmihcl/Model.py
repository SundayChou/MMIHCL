"""
Classes for generating cell embeddings.
"""
import torch

from Utils import *
from LossUtils import *
from torch.nn import Module, Parameter


# The model used to construct hypergraph-based cell embeddings.
class HypergraphModel(Module):
    def __init__(self, init_embeds_1, init_embeds_2, hyperedge_dim=32):
        """
        Initialization for HypergraphModel object.

        Parameters:
        init_embeds_1 (numpy.ndarray): The first list of embeddings to generate their cell embeddings.
        init_embeds_2 (numpy.ndarray): The second list of embeddings to generate their cell embeddings.
        hyperedge_dim (int): The dimension of cell-hyperedge embeddings.

        Returns:
        None.
        """
        super(HypergraphModel, self).__init__()

        # Initialize cell embeddings and trainable cell-hyperedge embeddings.
        self.cell_embeds_1 = torch.from_numpy(init_embeds_1).cuda()
        self.cell_embeds_2 = torch.from_numpy(init_embeds_2).cuda()
        self.hyperedge_embeds_1 = Parameter(torch.randn(init_embeds_1.shape[1], hyperedge_dim))
        self.hyperedge_embeds_2 = Parameter(torch.randn(init_embeds_2.shape[1], hyperedge_dim))

        # Initialize GCN and HGNN layer.
        self.GCNLayer = GCNLayer()
        self.HGNNLayer = HGNNLayer()

    def forward(self, adj_1, adj_2, n_layers=2):
        """
        Forward propagation for HypergraphModel object.

        Parameters:
        adj_1 (torch.Tensor): The adjacency matrix of first modality.
        adj_2 (torch.Tensor): The adjacency matrix of second modality.
        n_layers (int): The number of layers of GCN and HGNN.

        Returns:
        embeds_1 (torch.Tensor): The cell embeddings of first modality.
        embeds_2 (torch.Tensor): The cell embeddings of second modality.
        GCN_embeds_list_1 (list): The list of cell embeddings generated by GCN layer of first modality.
        GCN_embeds_list_2 (list): The list of cell embeddings generated by GCN layer of second modality.
        HGNN_embeds_list_1 (list): The list of cell embeddings generated by HGNN layer of first modality.
        HGNN_embeds_list_2 (list): The list of cell embeddings generated by HGNN layer of second modality.
        """
        # Initialize multi-layer cell embedding lists.
        embeds_list_1, embeds_list_2 = [self.cell_embeds_1], [self.cell_embeds_2]
        GCN_embeds_list_1, GCN_embeds_list_2 = [self.cell_embeds_1], [self.cell_embeds_2]
        HGNN_embeds_list_1, HGNN_embeds_list_2 = [self.cell_embeds_1], [self.cell_embeds_2]

        # Calculate cell-hyperedge matrices.
        cell_hyperedge_matrix_1 = self.cell_embeds_1 @ self.hyperedge_embeds_1
        cell_hyperedge_matrix_2 = self.cell_embeds_2 @ self.hyperedge_embeds_1

        # Fill above multi-layer cell embedding lists.
        for i in range(1, n_layers + 1):
            # Perform GCN and HGNN layer operation.
            GCN_embeds_1 = self.GCNLayer(embeds_list_1[-1], adj_1)
            GCN_embeds_2 = self.GCNLayer(embeds_list_2[-1], adj_2)
            HGNN_embeds_1 = self.HGNNLayer(embeds_list_1[-1], cell_hyperedge_matrix_1)
            HGNN_embeds_2 = self.HGNNLayer(embeds_list_2[-1], cell_hyperedge_matrix_2)

            # Append embeddings to multi-layer lists.
            GCN_embeds_list_1.append(GCN_embeds_1)
            GCN_embeds_list_2.append(GCN_embeds_2)
            HGNN_embeds_list_1.append(HGNN_embeds_1)
            HGNN_embeds_list_2.append(HGNN_embeds_2)
            embeds_list_1.append(GCN_embeds_1 + HGNN_embeds_1)
            embeds_list_2.append(GCN_embeds_2 + HGNN_embeds_2)

        # Sum all embeddings in embeds_list_1 and embeds_list_2.
        embeds_1 = sum(embeds_list_1[1:])
        embeds_2 = sum(embeds_list_2[1:])

        return embeds_1, embeds_2, GCN_embeds_list_1, \
            GCN_embeds_list_2, HGNN_embeds_list_1, HGNN_embeds_list_2

    def calculateLoss(self, GCN_embeds_list_1, GCN_embeds_list_2, 
                      HGNN_embeds_list_1, HGNN_embeds_list_2, n_layers=2, temp=0.1):
        """
        Calculate the target loss function of HypergraphModel.

        Parameters:
        GCN_embeds_list_1 (list): The list of cell embeddings generated by GCN layer of first modality.
        GCN_embeds_list_2 (list): The list of cell embeddings generated by GCN layer of second modality.
        HGNN_embeds_list_1 (list): The list of cell embeddings generated by HGNN layer of first modality.
        HGNN_embeds_list_2 (list): The list of cell embeddings generated by HGNN layer of second modality.
        n_layers (int): The number of layers of GCN and HGNN.
        decay (float): The decay weight of regular_loss.
        temp (float): The temperature parameter.

        Returns:
        loss (torch.Tensor): The target loss of HypergraphModel.
        """
        # Calculate contrast and regular losses and sum them up.
        contrast_loss_1 = contrastLoss(GCN_embeds_list_1, HGNN_embeds_list_1, n_layers, temp)
        contrast_loss_2 = contrastLoss(GCN_embeds_list_2, HGNN_embeds_list_2, n_layers, temp)
        loss = contrast_loss_1 + contrast_loss_2

        return loss


# The Graph Convolutional Network (GCN) layer.
class GCNLayer(Module):
    def __init__(self):
        """
        Initialization for GCNLayer object.

        Parameters:
        None.

        Returns:
        None.
        """
        super(GCNLayer, self).__init__()

    def forward(self, embeds, adj):
        """
        Forward propagation for GCNLayer object.

        Parameters:
        embeds (torch.Tensor): The embedding matrix.
        adj (torch.Tensor): The adjacency matrix.

        Returns:
        GCN_embeds (torch.Tensor): The GCN embedding matrix.
        """
        GCN_embeds = adj @ embeds
        GCN_embeds = L2Norm(GCN_embeds)

        return GCN_embeds


# The HyperGraph Neural Network (GHNN) layer.
class HGNNLayer(Module):
    def __init__(self):
        """
        Initialization for HGNNLayer object.

        Parameters:
        None.

        Returns:
        None.
        """
        super(HGNNLayer, self).__init__()

    def forward(self, embeds, adj):
        """
        Forward propagation for HGNNLayer object.

        Parameters:
        embeds (torch.Tensor): The embedding matrix.
        adj (torch.Tensor): The adjacency matrix.

        Returns:
        HGNN_embeds (torch.Tensor): The HGNN embedding matrix.
        """
        HGNN_embeds = adj @ adj.T @ embeds
        HGNN_embeds = L2Norm(HGNN_embeds)

        return HGNN_embeds